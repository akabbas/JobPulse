#!/usr/bin/env python3
"""
Update Jira Tickets with Code References
Adds actual code snippets and file references to Jira tickets
"""

import json
import logging
import os
import sys
import requests
from typing import Dict, List, Any

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class TicketCodeUpdater:
    """Update Jira tickets with code references and snippets"""
    
    def __init__(self, jira_site: str, api_token: str, email: str = None):
        self.jira_site = jira_site
        self.api_token = api_token
        self.email = email or "ammrabbasher@gmail.com"
        self.base_url = f"https://{jira_site}/rest/api/3"
        self.auth = (self.email, api_token)
        self.headers = {
            "Content-Type": "application/json",
            "Accept": "application/json"
        }
        
    def test_connection(self) -> bool:
        """Test Jira API connection"""
        try:
            response = requests.get(
                f"{self.base_url}/myself",
                auth=self.auth,
                headers=self.headers,
                timeout=30
            )
            if response.status_code == 200:
                user_info = response.json()
                logger.info(f"‚úÖ Connected to Jira as {user_info.get('displayName', 'Unknown')}")
                return True
            else:
                logger.error(f"‚ùå Connection failed: {response.status_code} - {response.text}")
                return False
        except Exception as e:
            logger.error(f"‚ùå Connection error: {e}")
            return False
    
    def load_code_mappings(self) -> Dict[str, Any]:
        """Load code-ticket mappings from file"""
        try:
            with open("code_ticket_mapping.json", "r") as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"‚ùå Failed to load code mappings: {e}")
            return {}
    
    def create_code_reference_content(self, mapping: Dict[str, Any]) -> str:
        """Create code reference content for Jira ticket"""
        ticket_key = mapping.get("ticket_key", "")
        ticket_summary = mapping.get("ticket_summary", "")
        components = mapping.get("matching_components", [])
        features = mapping.get("matching_features", [])
        confidence = mapping.get("confidence_score", 0.0)
        
        content = f"""## üíª Code References for {ticket_key}

### üìã Ticket Summary
{ticket_summary}

### üéØ Confidence Score
**{confidence:.1%}** - {'High' if confidence > 0.8 else 'Medium' if confidence > 0.5 else 'Low'} confidence match

### üîß Related Code Components
"""
        
        for component in components:
            category = component.get("category", "")
            comp_name = component.get("component", "")
            file_path = component.get("file_path", "")
            comp_features = component.get("features", [])
            code_snippet = component.get("code_snippet", "")
            
            content += f"""
#### üìÅ {comp_name.title()} ({category})
- **File**: `{file_path}`
- **Features**: {', '.join(comp_features)}
- **Code Snippet**:
```python
{code_snippet[:300]}{'...' if len(code_snippet) > 300 else ''}
```
"""
        
        if features:
            content += f"""
### üöÄ Related Features
{', '.join(features)}
"""
        
        content += f"""
### üìä Implementation Status
- **Code Location**: {len(components)} component(s) identified
- **File Paths**: {', '.join([c.get('file_path', '') for c in components])}
- **Last Updated**: {mapping.get('last_updated', 'Unknown')}

---
*Generated by Code-Ticket Mapping Analysis*
"""
        
        return content
    
    def update_ticket_with_code_references(self, ticket_key: str, content: str) -> bool:
        """Update a Jira ticket with code references"""
        try:
            # Convert content to Jira format
            jira_content = self.convert_markdown_to_jira(content)
            
            payload = {
                "fields": {
                    "description": {
                        "type": "doc",
                        "version": 1,
                        "content": jira_content
                    }
                }
            }
            
            response = requests.put(
                f"{self.base_url}/issue/{ticket_key}",
                auth=self.auth,
                headers=self.headers,
                json=payload,
                timeout=30
            )
            
            if response.status_code == 204:
                logger.info(f"‚úÖ Updated {ticket_key} with code references")
                return True
            else:
                logger.error(f"‚ùå Failed to update {ticket_key}: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Error updating {ticket_key}: {e}")
            return False
    
    def convert_markdown_to_jira(self, markdown_content: str) -> List[Dict[str, Any]]:
        """Convert markdown content to Jira format"""
        try:
            content = []
            lines = markdown_content.split('\n')
            
            for line in lines:
                if line.startswith('# '):
                    # Main heading
                    content.append({
                        "type": "heading",
                        "attrs": {"level": 1},
                        "content": [{"type": "text", "text": line[2:]}]
                    })
                elif line.startswith('## '):
                    # Subheading
                    content.append({
                        "type": "heading",
                        "attrs": {"level": 2},
                        "content": [{"type": "text", "text": line[3:]}]
                    })
                elif line.startswith('### '):
                    # Sub-subheading
                    content.append({
                        "type": "heading",
                        "attrs": {"level": 3},
                        "content": [{"type": "text", "text": line[4:]}]
                    })
                elif line.startswith('#### '):
                    # Sub-sub-subheading
                    content.append({
                        "type": "heading",
                        "attrs": {"level": 4},
                        "content": [{"type": "text", "text": line[5:]}]
                    })
                elif line.startswith('- '):
                    # Bullet point
                    content.append({
                        "type": "paragraph",
                        "content": [{"type": "text", "text": line[2:]}]
                    })
                elif line.startswith('```'):
                    # Code block
                    if line == '```python' or line == '```':
                        continue  # Skip code block markers
                    else:
                        content.append({
                            "type": "paragraph",
                            "content": [{"type": "text", "text": line}]
                        })
                elif line.strip():
                    # Regular paragraph
                    content.append({
                        "type": "paragraph",
                        "content": [{"type": "text", "text": line}]
                    })
                else:
                    # Empty line
                    content.append({
                        "type": "paragraph",
                        "content": []
                    })
            
            return content
            
        except Exception as e:
            logger.error(f"‚ùå Error converting markdown to Jira: {e}")
            return [{"type": "paragraph", "content": [{"type": "text", "text": markdown_content}]}]
    
    def update_all_tickets_with_code_references(self) -> bool:
        """Update all tickets with code references"""
        try:
            logger.info("üöÄ Starting ticket updates with code references")
            
            # Test connection
            if not self.test_connection():
                return False
            
            # Load code mappings
            mappings_data = self.load_code_mappings()
            if not mappings_data:
                logger.error("‚ùå No code mappings found")
                return False
            
            ticket_mappings = mappings_data.get("ticket_mappings", [])
            logger.info(f"üìã Found {len(ticket_mappings)} ticket mappings")
            
            # Update tickets with high confidence matches first
            high_confidence_mappings = [m for m in ticket_mappings if m.get("confidence_score", 0) > 0.7]
            logger.info(f"üéØ Updating {len(high_confidence_mappings)} high-confidence matches")
            
            updated_count = 0
            update_results = []
            
            for mapping in high_confidence_mappings:
                ticket_key = mapping.get("ticket_key")
                confidence = mapping.get("confidence_score", 0.0)
                
                logger.info(f"üìù Updating {ticket_key} (confidence: {confidence:.1%})")
                
                # Create code reference content
                content = self.create_code_reference_content(mapping)
                
                # Update ticket
                if self.update_ticket_with_code_references(ticket_key, content):
                    updated_count += 1
                    update_results.append({
                        "ticket_key": ticket_key,
                        "updated": True,
                        "confidence": confidence
                    })
                else:
                    update_results.append({
                        "ticket_key": ticket_key,
                        "updated": False,
                        "confidence": confidence
                    })
            
            # Log results
            logger.info(f"üéâ Ticket updates completed!")
            logger.info(f"üìä Updated {updated_count}/{len(high_confidence_mappings)} tickets")
            
            # Save results
            results = {
                "total_mappings": len(ticket_mappings),
                "high_confidence_mappings": len(high_confidence_mappings),
                "updated_tickets": updated_count,
                "update_results": update_results,
                "update_timestamp": "2025-10-16T15:30:00Z"
            }
            
            with open("ticket_code_update_results.json", "w") as f:
                json.dump(results, f, indent=2)
            
            logger.info("üìÑ Update results saved to ticket_code_update_results.json")
            logger.info("üéâ Ticket code reference updates completed successfully!")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Ticket updates failed: {e}")
            return False

def main():
    """Main function"""
    # Get environment variables
    jira_site = os.getenv("JIRA_SITE")
    api_token = os.getenv("JIRA_API_TOKEN")
    
    if not jira_site or not api_token:
        logger.error("‚ùå Missing required environment variables: JIRA_SITE, JIRA_API_TOKEN")
        sys.exit(1)
    
    # Create updater
    updater = TicketCodeUpdater(jira_site, api_token, "ammrabbasher@gmail.com")
    
    # Update tickets with code references
    success = updater.update_all_tickets_with_code_references()
    
    if success:
        logger.info("üéâ All tickets updated with code references!")
        sys.exit(0)
    else:
        logger.error("‚ùå Ticket updates failed!")
        sys.exit(1)

if __name__ == "__main__":
    main()
